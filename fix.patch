diff --git a/zh-cn/application-dev/reference/common/_j_s_v_m.md b/zh-cn/application-dev/reference/common/_j_s_v_m.md
index 8c43b33a97d..d0611b2b6e2 100644
--- a/zh-cn/application-dev/reference/common/_j_s_v_m.md
+++ b/zh-cn/application-dev/reference/common/_j_s_v_m.md
@@ -1511,8 +1511,8 @@ JSVM_EXTERN JSVM_Status OH_JSVM_CompileScriptWithOptions (JSVM_Env env, JSVM_Val
 | -------- | -------- |
 | env | 目标环境，JSVM-API接口将在该环境下调用。 | 
 | script | 包含要编译的脚本的JavaScript代码。 | 
-| optionCount | 传入的 option 数组的长度. | 
-| options | option 数组，存放所有的编译选项. | 
+| optionCount | 传入的 option 数组的长度。 | 
+| options | option 数组，存放所有的编译选项。 | 
 | result | 编译后的脚本。 | 
 
 **返回：**
@@ -5172,7 +5172,7 @@ JSVM_EXTERN JSVM_Status OH_JSVM_OpenInspectorWithName (JSVM_Env env, int pid, co
 
 **描述**
 
-此函数打开一个命名为传入 name 的 inspector，为其打开对应 pid 的 unix domain 端口.
+此函数打开一个命名为传入 name 的 inspector，为其打开对应 pid 的 unix domain 端口。
 
 **起始版本：** 12
 
@@ -5180,15 +5180,15 @@ JSVM_EXTERN JSVM_Status OH_JSVM_OpenInspectorWithName (JSVM_Env env, int pid, co
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| env | 调用该API的环境. | 
-| pid | 用于标识 inspector 连接的进程ID. | 
-| name | inspector 的名字. 如果传入nullptr, 则默认名称为jsvm. | 
+| env | 调用该API的环境。 | 
+| pid | 用于标识 inspector 连接的进程ID。 | 
+| name | inspector 的名字. 如果传入nullptr, 则默认名称为jsvm。 | 
 
 **返回：**
 
 返回执行状态码 JSVM_Status JSVM_OK 表示执行成功。
 
-JSVM_PENDING_EXCEPTION 表示发生了异常.
+JSVM_PENDING_EXCEPTION 表示发生了异常。
 
 
 ### OH_JSVM_OpenVMScope()
@@ -6096,7 +6096,7 @@ JSVM_EXTERN JSVM_Status OH_JSVM_RetainScript (JSVM_Env env, JSVM_Script script )
 
 **描述**
 
-持久保存一个JSVM_Script并将其生命周期延长到当前作用域之外.
+持久保存一个JSVM_Script并将其生命周期延长到当前作用域之外。
 
 **起始版本：** 12
 
@@ -6104,8 +6104,8 @@ JSVM_EXTERN JSVM_Status OH_JSVM_RetainScript (JSVM_Env env, JSVM_Script script )
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| env | 调用该API的环境. | 
-| script | 包含要持久化保存脚本的JavaScript字符串. | 
+| env | 调用该API的环境。 | 
+| script | 包含要持久化保存脚本的JavaScript字符串。 | 
 
 **返回：**
 
diff --git a/zh-cn/application-dev/reference/common/_j_s_v_m___callback_struct.md b/zh-cn/application-dev/reference/common/_j_s_v_m___callback_struct.md
index 0b5ffdee641..332d74cb9e4 100644
--- a/zh-cn/application-dev/reference/common/_j_s_v_m___callback_struct.md
+++ b/zh-cn/application-dev/reference/common/_j_s_v_m___callback_struct.md
@@ -17,7 +17,7 @@
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| [JSVM_Value](#callback) (JSVM_CDECL \*callback)([JSVM_Env](_j_s_v_m.md#jsvm_env) env, JSVM_CallbackInfo info) | 用户提供的native回调函数的指针 | 
+| [JSVM_Value](#callback) (JSVM_CDECL \*callback)([JSVM_Env](_j_s_v_m.md#jsvm_env) env, JSVM_CallbackInfo info) | 用户提供的native回调函数的指针。 | 
 
 
 ### 成员变量
diff --git a/zh-cn/application-dev/reference/common/_j_s_v_m___init_options.md b/zh-cn/application-dev/reference/common/_j_s_v_m___init_options.md
index 47c0ac88411..b0ae7a0b40a 100644
--- a/zh-cn/application-dev/reference/common/_j_s_v_m___init_options.md
+++ b/zh-cn/application-dev/reference/common/_j_s_v_m___init_options.md
@@ -19,7 +19,7 @@
 | -------- | -------- |
 | const intptr_t \* [externalReferences](#externalreferences) | 可选。嵌入器中可选的、以nullptr结尾的原始地址数组， 虚拟机可以在序列化期间与之匹配，并可用于反序列化。 此数组及其内容必须在虚拟机实例的整个生命周期内保持有效。  | 
 | int \* [argc](#argc) | 虚拟机的标志。如果removeFlags为true，则已识别的标志将从 （argc, argv）中移除。请注意，这些标志当前仅限于V8虚拟机。 它们主要用于开发。不要将它们用于生产环境，因为如果虚拟机与 开发环境不同，它们可能不会生效。  | 
-| char \*\* [argv](#argv) | argv .  | 
+| char \*\* [argv](#argv) | 传入的参数列表。  | 
 | bool [removeFlags](#removeflags) | 删除标志。  | 
 
 
@@ -41,7 +41,7 @@ int* JSVM_InitOptions::argc
 char** JSVM_InitOptions::argv
 ```
 **描述**
-argv .
+传入的参数列表。
 
 
 ### externalReferences
diff --git a/zh-cn/application-dev/reference/common/_j_s_v_m___property_handler_configuration_struct.md b/zh-cn/application-dev/reference/common/_j_s_v_m___property_handler_configuration_struct.md
index a40cd2d268e..9e8588f00d9 100644
--- a/zh-cn/application-dev/reference/common/_j_s_v_m___property_handler_configuration_struct.md
+++ b/zh-cn/application-dev/reference/common/_j_s_v_m___property_handler_configuration_struct.md
@@ -31,8 +31,8 @@
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| [JSVM_Value](_j_s_v_m.md#jsvm_value) [namedPropertyData](#namedpropertydata) | 命名属性回调使用的数据  | 
-| [JSVM_Value](_j_s_v_m.md#jsvm_value) [indexedPropertyData](#indexedpropertydata) | 索引属性回调使用的数据  | 
+| [JSVM_Value](_j_s_v_m.md#jsvm_value) [namedPropertyData](#namedpropertydata) | 命名属性回调使用的数据。  | 
+| [JSVM_Value](_j_s_v_m.md#jsvm_value) [indexedPropertyData](#indexedpropertydata) | 索引属性回调使用的数据。  | 
 
 
 ## 成员函数说明
@@ -117,7 +117,7 @@ JSVM_PropertyHandlerConfigurationStruct::JSVM_Value (JSVM_CDECL * genericIndexed
 JSVM_Value JSVM_PropertyHandlerConfigurationStruct::indexedPropertyData
 ```
 **描述**
-索引属性回调使用的数据
+索引属性回调使用的数据。
 
 
 ### namedPropertyData
@@ -126,4 +126,4 @@ JSVM_Value JSVM_PropertyHandlerConfigurationStruct::indexedPropertyData
 JSVM_Value JSVM_PropertyHandlerConfigurationStruct::namedPropertyData
 ```
 **描述**
-命名属性回调使用的数据
+命名属性回调使用的数据。
diff --git a/zh-cn/application-dev/reference/common/_j_s_v_m___script_origin.md b/zh-cn/application-dev/reference/common/_j_s_v_m___script_origin.md
index 81495a56d04..159418cce02 100644
--- a/zh-cn/application-dev/reference/common/_j_s_v_m___script_origin.md
+++ b/zh-cn/application-dev/reference/common/_j_s_v_m___script_origin.md
@@ -17,10 +17,10 @@ Source code information.
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| const char \* [sourceMapUrl](#sourcemapurl) | Sourcemap 路径.  | 
-| const char \* [resourceName](#resourcename) | 源文件名.  | 
-| size_t [resourceLineOffset](#resourcelineoffset) | 这段代码在源文件中的起始行号  | 
-| size_t [resourceColumnOffset](#resourcecolumnoffset) | 这段代码在源文件中的起始列号  | 
+| const char \* [sourceMapUrl](#sourcemapurl) | Sourcemap 路径。  | 
+| const char \* [resourceName](#resourcename) | 源文件名。  | 
+| size_t [resourceLineOffset](#resourcelineoffset) | 这段代码在源文件中的起始行号。  | 
+| size_t [resourceColumnOffset](#resourcecolumnoffset) | 这段代码在源文件中的起始列号。  | 
 
 
 ## 结构体成员变量说明
@@ -32,7 +32,7 @@ Source code information.
 size_t JSVM_ScriptOrigin::resourceColumnOffset
 ```
 **描述**
-这段代码在源文件中的起始列号
+这段代码在源文件中的起始列号。
 
 
 ### resourceLineOffset
@@ -41,7 +41,7 @@ size_t JSVM_ScriptOrigin::resourceColumnOffset
 size_t JSVM_ScriptOrigin::resourceLineOffset
 ```
 **描述**
-这段代码在源文件中的起始行号
+这段代码在源文件中的起始行号。
 
 
 ### resourceName
@@ -50,7 +50,7 @@ size_t JSVM_ScriptOrigin::resourceLineOffset
 const char* JSVM_ScriptOrigin::resourceName
 ```
 **描述**
-源文件名.
+源文件名。
 
 
 ### sourceMapUrl
@@ -59,4 +59,4 @@ const char* JSVM_ScriptOrigin::resourceName
 const char* JSVM_ScriptOrigin::sourceMapUrl
 ```
 **描述**
-Sourcemap 路径.
+Sourcemap 路径。
diff --git a/zh-cn/application-dev/reference/common/jsvm_8h.md b/zh-cn/application-dev/reference/common/jsvm_8h.md
index 79a6b4c2ea9..655ebf544c9 100644
--- a/zh-cn/application-dev/reference/common/jsvm_8h.md
+++ b/zh-cn/application-dev/reference/common/jsvm_8h.md
@@ -23,12 +23,12 @@
 
 | 名称 | 描述 | 
 | -------- | -------- |
-| **JSVM_VERSION_EXPERIMENTAL**&nbsp;&nbsp;&nbsp;2147483647 |  | 
-| **JSVM_VERSION**&nbsp;&nbsp;&nbsp;8 |  | 
-| **JSVM_EXTERN**&nbsp;&nbsp;&nbsp;__attribute__((visibility("default"))) |  | 
+| **JSVM_VERSION_EXPERIMENTAL**&nbsp;&nbsp;&nbsp;2147483647 | JSVM 实验性版本号。 | 
+| **JSVM_VERSION**&nbsp;&nbsp;&nbsp;8 | JSVM 版本号。 | 
+| **JSVM_EXTERN**&nbsp;&nbsp;&nbsp;__attribute__((visibility("default"))) | 指定符号对外部可见。 | 
 | [JSVM_AUTO_LENGTH](_j_s_v_m.md#jsvm_auto_length)&nbsp;&nbsp;&nbsp;SIZE_MAX | 自动长度。  | 
-| **EXTERN_C_START** |  | 
-| **EXTERN_C_END** |  | 
+| **EXTERN_C_START** | 表示接下来的代码使用 C 语言的链接约定。 | 
+| **EXTERN_C_END** | 表示后续的代码使用 C++ 默认的链接约定。 | 
 
 
 ### 函数
@@ -207,9 +207,9 @@
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_CreateFunctionWithScript](_j_s_v_m.md#oh_jsvm_createfunctionwithscript) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, const char \*funcName, size_t length, size_t argc, const [JSVM_Value](_j_s_v_m.md#jsvm_value) \*argv, [JSVM_Value](_j_s_v_m.md#jsvm_value) script, [JSVM_Value](_j_s_v_m.md#jsvm_value) \*result) | 创建一个以给定JavaScript为函数体的函数。  | 
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_PumpMessageLoop](_j_s_v_m.md#oh_jsvm_pumpmessageloop) ([JSVM_VM](_j_s_v_m.md#jsvm_vm) vm, bool \*result) | 启动虚拟机内任务队列的运行。这个任务队列可以通过外部事件循环来执行。  | 
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_PerformMicrotaskCheckpoint](_j_s_v_m.md#oh_jsvm_performmicrotaskcheckpoint) ([JSVM_VM](_j_s_v_m.md#jsvm_vm) vm) | 检查队列中是否有微任务等待，如果存在则执行它们。  | 
-| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_RetainScript](_j_s_v_m.md#oh_jsvm_retainscript) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Script](_j_s_v_m.md#jsvm_script) script) | 持久保存一个JSVM_Script并将其生命周期延长到当前作用域之外.  | 
-| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_ReleaseScript](_j_s_v_m.md#oh_jsvm_releasescript) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Script](_j_s_v_m.md#jsvm_script) script) | 此函数释放由OH_JSVM_RetainScript保留的脚本，释放后应避免对传入 script 的再次使用.  | 
-| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_OpenInspectorWithName](_j_s_v_m.md#oh_jsvm_openinspectorwithname) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, int pid, const char \*name) | 此函数打开一个命名为传入 name 的 inspector，为其打开对应 pid 的 unix domain 端口.  | 
+| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_RetainScript](_j_s_v_m.md#oh_jsvm_retainscript) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Script](_j_s_v_m.md#jsvm_script) script) | 持久保存一个JSVM_Script并将其生命周期延长到当前作用域之外。  | 
+| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_ReleaseScript](_j_s_v_m.md#oh_jsvm_releasescript) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Script](_j_s_v_m.md#jsvm_script) script) | 此函数释放由OH_JSVM_RetainScript保留的脚本，释放后应避免对传入 script 的再次使用。  | 
+| JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_OpenInspectorWithName](_j_s_v_m.md#oh_jsvm_openinspectorwithname) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, int pid, const char \*name) | 此函数打开一个命名为传入 name 的 inspector，为其打开对应 pid 的 unix domain 端口。  | 
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_CompileWasmModule](_j_s_v_m.md#oh_jsvm_compilewasmmodule) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, const uint8_t \*wasmBytecode, size_t wasmBytecodeLength, const uint8_t \*cacheData, size_t cacheDataLength, bool \*cacheRejected, [JSVM_Value](_j_s_v_m.md#jsvm_value) \*wasmModule) | 将 WebAssembly 字节码编译得到一个 WebAssembly 模块。 如果提供了 WebAssembly 缓存，则会先尝试对缓存进行反序列化。  | 
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_CompileWasmFunction](_j_s_v_m.md#oh_jsvm_compilewasmfunction) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Value](_j_s_v_m.md#jsvm_value) wasmModule, uint32_t functionIndex, [JSVM_WasmOptLevel](_j_s_v_m.md#jsvm_wasmoptlevel) optLevel) | 对当前 WebAssembly 模块中指定索引的函数进行指定优化等级的编译优化。  | 
 | JSVM_EXTERN [JSVM_Status](_j_s_v_m.md#jsvm_status) [OH_JSVM_IsWasmModuleObject](_j_s_v_m.md#oh_jsvm_iswasmmoduleobject) ([JSVM_Env](_j_s_v_m.md#jsvm_env) env, [JSVM_Value](_j_s_v_m.md#jsvm_value) value, bool \*result) | 判断给定的 JSVM_Value 是否是一个 WebAssembly 模块。  | 
